import{c as G}from"./index-CxF79Cv8.js";import{f as _,o as C,p as M,h as R,r as E,j as h,a as P}from"./index-BgPfMftx.js";import{b as j}from"./chunk-DMO4EI7P-ffbJSNvT.js";import{c as F}from"./chunk-R3DH46PF-iWUMGBws.js";var K=()=>typeof document<"u",g=!1,p=null,o=!1,c=!1,f=new Set;function m(t,e){f.forEach(r=>r(t,e))}var T=typeof window<"u"&&window.navigator!=null?/^Mac/.test(window.navigator.platform):!1;function V(t){return!(t.metaKey||!T&&t.altKey||t.ctrlKey||t.key==="Control"||t.key==="Shift"||t.key==="Meta")}function w(t){o=!0,V(t)&&(p="keyboard",m("keyboard",t))}function u(t){if(p="pointer",t.type==="mousedown"||t.type==="pointerdown"){o=!0;const e=t.composedPath?t.composedPath()[0]:t.target;let r=!1;try{r=e.matches(":focus-visible")}catch{}if(r)return;m("pointer",t)}}function z(t){return t.mozInputSource===0&&t.isTrusted?!0:t.detail===0&&!t.pointerType}function N(t){z(t)&&(o=!0,p="virtual")}function B(t){t.target===window||t.target===document||(!o&&!c&&(p="virtual",m("virtual",t)),o=!1,c=!1)}function W(){o=!1,c=!0}function I(){return p!=="pointer"}function A(){if(!K()||g)return;const{focus:t}=HTMLElement.prototype;HTMLElement.prototype.focus=function(...r){o=!0,t.apply(this,r)},document.addEventListener("keydown",w,!0),document.addEventListener("keyup",w,!0),document.addEventListener("click",N,!0),window.addEventListener("focus",B,!0),window.addEventListener("blur",W,!1),typeof PointerEvent<"u"?(document.addEventListener("pointerdown",u,!0),document.addEventListener("pointermove",u,!0),document.addEventListener("pointerup",u,!0)):(document.addEventListener("mousedown",u,!0),document.addEventListener("mousemove",u,!0),document.addEventListener("mouseup",u,!0)),g=!0}function U(t){A(),t(I());const e=()=>t(I());return f.add(e),()=>{f.delete(e)}}var[H,X]=G({name:"InputGroupStylesContext",errorMessage:`useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in "<InputGroup />" `}),D=_(function(e,r){const l=j("Input",e),{children:L,className:b,...k}=C(e),S=M("chakra-input__group",b),a={},y=R(L),i=l.field;y.forEach(n=>{var s,d;l&&(i&&n.type.id==="InputLeftElement"&&(a.paddingStart=(s=i.height)!=null?s:i.h),i&&n.type.id==="InputRightElement"&&(a.paddingEnd=(d=i.height)!=null?d:i.h),n.type.id==="InputRightAddon"&&(a.borderEndRadius=0),n.type.id==="InputLeftAddon"&&(a.borderStartRadius=0))});const x=y.map(n=>{var s,d;const v=F({size:((s=n.props)==null?void 0:s.size)||e.size,variant:((d=n.props)==null?void 0:d.variant)||e.variant});return n.type.id!=="Input"?E.cloneElement(n,v):E.cloneElement(n,Object.assign(v,a,n.props))});return h.jsx(P.div,{className:S,ref:r,__css:{width:"100%",display:"flex",position:"relative",isolation:"isolate",...l.group},"data-group":!0,...k,children:h.jsx(H,{value:l,children:x})})});D.displayName="InputGroup";export{D as I,U as t,X as u};
